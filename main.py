# app/main.py

import asyncio
import logging
import aiogram
from fastapi import FastAPI, Request
from bot.bot import dp, bot
from core.config import settings
from db.session import init_db
from bot.handlers import payment_handler
from bot.services.user_config_service import handle_payment_callback
from tasks.expired_user_cleaner import remove_expired_users
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from api.routes import health
from aiogram.types import Message
from aiogram.filters import Command

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG, format="%(asctime)s [%(levelname)s] %(message)s")

app = FastAPI(title="No Logs Bot")

app.include_router(health.router)

# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è /start –∏ /help
@payment_handler.message(Command("start"))
async def start_command(msg: Message):
    logging.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –æ—Ç tg_id={msg.from_user.id}")
    await msg.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ No Logs VPN!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏, /pay –¥–ª—è –æ–ø–ª–∞—Ç—ã, /config –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞, –∏–ª–∏ 'üéÅ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç' –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.")

@payment_handler.message(Command("help"))
async def help_command(msg: Message):
    logging.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help –æ—Ç tg_id={msg.from_user.id}")
    await msg.answer("‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã:\n/subscribe - –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n/pay - –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n/config - –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥\nüéÅ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç - —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø")

# –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def debug_all_messages(msg: Message):
    logging.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg.text} –æ—Ç tg_id={msg.from_user.id}")
    await msg.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ '{msg.text}' –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ. –ü—Ä–æ–≤–µ—Ä—è—é...")

@app.post("/callback")
async def payment_callback(request: Request):
    data = await request.json()
    success = await handle_payment_callback(data, bot)
    return {"status": "ok" if success else "error"}

@app.on_event("startup")
async def startup():
    logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º aiogram –≤–µ—Ä—Å–∏–∏ {aiogram.__version__}")
    run_scheduler()
    asyncio.create_task(remove_expired_users())
    logging.info("üöÄ Starting up...")
    init_db()
    try:
        dp.include_router(payment_handler)
        logging.info("payment_handler –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling: {str(e)}")
        raise
    logging.info("ü§ñ Telegram bot polling started")

@app.get("/health")
async def health_check():
    return {"status": "ok"}

def run_scheduler():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(remove_expired_users, IntervalTrigger(minutes=1))
    scheduler.start()