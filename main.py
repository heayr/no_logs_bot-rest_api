# main.py




import asyncio
import logging
import aiogram
from fastapi import FastAPI
from bot.bot import dp, bot
from core.config import settings
from db.session import init_db
from bot.handlers import register_handlers
from tasks.expired_user_cleaner import remove_expired_users
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from bot.routes.yookassa_webhook import router as webhook_router

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.DEBUG, format="%(asctime)s [%(levelname)s] %(message)s")

app = FastAPI(title="No Logs Bot")

app.include_router(webhook_router)

@app.get("/health")
async def health_check():
    logging.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /health")
    return {"status": "ok"}

async def start_polling():
    logging.info("–ó–∞–ø—É—Å–∫ aiogram polling")
    try:
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling: {str(e)}", exc_info=True)
        raise

def run_scheduler():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(remove_expired_users, IntervalTrigger(minutes=1))
    scheduler.start()
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")

@app.on_event("startup")
async def startup():
    logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º aiogram –≤–µ—Ä—Å–∏–∏ {aiogram.__version__}")
    try:
        init_db()
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        register_handlers(dp)
        logging.info("–í—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        run_scheduler()
        asyncio.create_task(start_polling())
        logging.info("üöÄ FastAPI –∏ aiogram –∑–∞–ø—É—â–µ–Ω—ã")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {str(e)}", exc_info=True)
        raise

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)