# main.py
import aiogram
import asyncio
import logging
from fastapi import FastAPI, Request
from bot.bot import dp, bot
from core.config import settings
from db.session import init_db
from bot.handlers import register_handlers
from tasks.expired_user_cleaner import remove_expired_users
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
from aiogram.types import Message
from aiogram.filters import Command
from bot.services.user_config_service import handle_payment_callback

logging.basicConfig(level=logging.DEBUG, format="%(asctime)s [%(levelname)s] %(message)s")

app = FastAPI(title="No Logs Bot")

# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è /start –∏ /help
@dp.message(Command("start"))
async def start_command(msg: Message):
    logging.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –æ—Ç tg_id={msg.from_user.id}")
    await msg.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ No Logs VPN!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏, /pay –¥–ª—è –æ–ø–ª–∞—Ç—ã, /config –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥–∞, –∏–ª–∏ 'üéÅ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç' –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞.")

@dp.message(Command("help"))
async def help_command(msg: Message):
    logging.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help –æ—Ç tg_id={msg.from_user.id}")
    await msg.answer("‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã:\n/subscribe - –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n/pay - –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n/config - –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥\nüéÅ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç - —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø")

@app.get("/health")
async def health_check():
    logging.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /health")
    return {"status": "ok"}

@app.post("/webhook/yookassa")
async def payment_callback(request: Request):
    try:
        data = await request.json()
        logging.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /webhook/yookassa: {data}")
        success = await handle_payment_callback(data, bot)
        return {"status": "ok" if success else "error"}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ /webhook/yookassa: {str(e)}", exc_info=True)
        return {"status": "error", "message": str(e)}

async def start_polling():
    try:
        logging.info("–ó–∞–ø—É—Å–∫ aiogram polling")
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling: {str(e)}", exc_info=True)
        raise

def run_scheduler():
    scheduler = AsyncIOScheduler()
    scheduler.add_job(remove_expired_users, IntervalTrigger(minutes=1))
    scheduler.start()
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á –∑–∞–ø—É—â–µ–Ω")

@app.on_event("startup")
async def startup():
    logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º aiogram –≤–µ—Ä—Å–∏–∏ {aiogram.__version__}")
    init_db()
    register_handlers(dp)
    logging.info("–í—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    run_scheduler()
    asyncio.create_task(start_polling())
    logging.info("üöÄ FastAPI –∏ aiogram –∑–∞–ø—É—â–µ–Ω—ã")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)