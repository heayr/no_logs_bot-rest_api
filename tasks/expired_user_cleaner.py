import asyncio
import logging
from datetime import datetime
from db.session import get_connection
from bot.services.user_config_service import delete_user  # async —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from db.crud.user_crud import delete_user_by_uuid

async def remove_expired_users():
    logging.info("üßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç—ë–∫—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    conn = get_connection()
    cursor = conn.cursor()

    # –î–æ—Å—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º
    cursor.execute("SELECT uuid FROM users WHERE expires_at < ?", (datetime.utcnow().isoformat(),))
    expired = cursor.fetchall()

    if not expired:
        logging.info("‚úÖ –ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        conn.close()
        return

    for (uuid,) in expired:
        try:
            logging.info(f"–£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å uuid={uuid}")
            delete_user_by_uuid(uuid)
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {uuid}: {e}")

    conn.close()
