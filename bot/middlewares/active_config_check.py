# bot/middlewares/active_config_check.py

import logging
from aiogram import BaseMiddleware
from aiogram.types import CallbackQuery
from db.crud.user_crud import get_active_user_by_tg_id
from core.config import settings

class ActiveConfigCheckMiddleware(BaseMiddleware):
    """
    Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –ø–µ—Ä–µ–¥ callback'–∞–º–∏.
    """
    async def __call__(self, handler, event: CallbackQuery, data: dict):
        tg_id = event.from_user.id
        if str(tg_id) == str(settings.ADMIN_IDS):
            return await handler(event, data)  # –ê–¥–º–∏–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç—Å—è

        if event.data in ["get_test_config", "get_paid_config"]:
            user = get_active_user_by_tg_id(tg_id)
            if user:
                logging.info(f"–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –Ω–∞–π–¥–µ–Ω –¥–ª—è tg_id={tg_id}, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
                await event.message.answer(
                    "üîí –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ.",
                    parse_mode="HTML"
                )
                await event.answer()
                return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        return await handler(event, data)  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É