# bot/services/user_config_service.py
import asyncio
import logging
from datetime import datetime, timedelta
from uuid import uuid4
from core.config import settings
from bot.services.xray_service import add_client, remove_client
from db.crud.user_crud import save_user, get_active_user_by_tg_id, get_connection, delete_user_by_uuid
from db.crud.transaction_crud import confirm_transaction
from utils.formatters import generate_vless_link, format_expiration_message
from yookassa import Configuration, Payment
from yookassa.domain.request import PaymentRequest
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, input_file
from io import BytesIO
from PIL import Image
import qrcode
import html

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆKassa
Configuration.account_id = "1133698"
Configuration.secret_key = "test_XzPhDavE0PF5MfRT4zY22gdRU_K0PUsFGX-d8ZWrso0"

async def create_payment(tg_id: int, amount: float, order_id: str):
    try:
        idempotence_key = str(uuid4())
        payment_request = {
            "amount": {
                "value": f"{amount:.2f}",
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": f"t.me/{settings.BOT_NAME}"
            },
            "description": f"No Logs VPN –ø–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è {order_id}",
            "metadata": {
                "order_id": order_id,
                "tg_id": str(tg_id)
            },
            "receipt": {
                "customer": {
                    "email": f"user_{tg_id}@example.com"
                },
                "items": [
                    {
                        "description": "–ü–æ–¥–ø–∏—Å–∫–∞ No Logs VPN –Ω–∞ 30 –¥–Ω–µ–π",
                        "quantity": "1.00",
                        "amount": {
                            "value": f"{amount:.2f}",
                            "currency": "RUB"
                        },
                        "vat_code": 1,
                        "payment_subject": "service",
                        "payment_mode": "full_payment"
                    }
                ]
            }
        }
        
        payment = Payment.create(payment_request, idempotence_key)
        return payment.confirmation.confirmation_url, payment.id
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa: {str(e)}", exc_info=True)
        raise

async def send_payment_link(bot: Bot, chat_id: int, tg_id: int, amount: float, order_id: str):
    try:
        payment_url, payment_id = await create_payment(tg_id, amount, order_id)
        
        qr = qrcode.QRCode(version=1, box_size=10, border=4)
        qr.add_data(payment_url)
        qr.make(fit=True)
        qr_img = qr.make_image(fill_color="black", back_color="white")
        qr_io = BytesIO()
        qr_img.save(qr_io, format="PNG")
        qr_io.seek(0)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=payment_url)]
        ])
        
        await bot.send_message(
            chat_id,
            f"üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ {amount} RUB –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ No Logs VPN.\n\n"
            f"üì≤ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥.",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await bot.send_photo(
            chat_id,
            photo=input_file.BufferedInputFile(qr_io.getvalue(), filename="qr_code.png"),
            caption="–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã",
            parse_mode="HTML"
        )
        logging.info(f"–ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è tg_id={tg_id}, order_id={order_id}")
        return payment_url, payment_id
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è tg_id={tg_id}: {str(e)}", exc_info=True)
        await bot.send_message(
            chat_id,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
        raise

async def handle_payment_callback(data: dict, bot: Bot):
    try:
        logging.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –ÆKassa: {data}")
        event = data.get("event")
        payment = data.get("object")
        order_id = payment["metadata"]["order_id"]
        tg_id = int(payment["metadata"]["tg_id"])
        payment_id = payment["id"]

        if event not in ["payment.succeeded", "payment.waiting_for_capture"]:
            logging.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ —Å–æ–±—ã—Ç–∏–µ –ÆKassa: {event}")
            return False

        if event == "payment.waiting_for_capture":
            logging.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ payment_id={payment_id} –¥–ª—è order_id={order_id}")
            try:
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–ª–∞—Ç—ë–∂
                idempotence_key = str(uuid4())  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è capture
                payment_response = Payment.capture(payment_id, idempotence_key)
                if payment_response.status == "succeeded":
                    logging.info(f"–ü–ª–∞—Ç—ë–∂ payment_id={payment_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω")
                else:
                    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–ª–∞—Ç—ë–∂ payment_id={payment_id}: {payment_response.status}")
                    return False
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ payment_id={payment_id}: {str(e)}", exc_info=True)
                return False
            return True  # –ñ–¥—ë–º payment.succeeded

        if event == "payment.succeeded":
            logging.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ payment.succeeded –¥–ª—è order_id={order_id}, tg_id={tg_id}")
            transaction = await confirm_transaction(order_id)
            if not transaction:
                logging.error(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
                return False

            config_link, expires_days, error = await create_paid_user(tg_id, days=transaction["days"], return_days=True)
            if error:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è tg_id={tg_id}: {error}")
                await bot.send_message(tg_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {error}")
                return False

            qr = qrcode.QRCode(version=1, box_size=10, border=4)
            qr.add_data(config_link)
            qr.make(fit=True)
            qr_img = qr.make_image(fill_color="black", back_color="white")
            qr_io = BytesIO()
            qr_img.save(qr_io, format="PNG")
            qr_io.seek(0)

            caption = (
                f"üîí <b>–í–∞—à VPN-–∫–æ–Ω—Ñ–∏–≥ –≥–æ—Ç–æ–≤!</b>\n"
                f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expires_days} –¥–Ω–µ–π\n\n"
                f"üìå <b>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É:</b>\n"
                f"<code>{html.escape(config_link)}</code>\n\n"
                f"üì≤ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
                f"1. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥\n"
                f"2. –ò–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é\n"
                f"3. –î–ª—è v2RayTun –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É"
            )

            await bot.send_photo(
                tg_id,
                photo=input_file.BufferedInputFile(qr_io.getvalue(), filename="qr_code.png"),
                caption=caption,
                parse_mode="HTML"
            )
            logging.info(f"VLESS-—Å—Å—ã–ª–∫–∞ –≤—ã–¥–∞–Ω–∞ –¥–ª—è tg_id={tg_id}, order_id={order_id}")
            return True
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback –ÆKassa: {str(e)}", exc_info=True)
        return False

async def create_paid_user(tg_id: int = 0, days: int = 30, transaction_id: str = None, return_days: bool = False):
    try:
        if not transaction_id:
            logging.warning(f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ create_paid_user –±–µ–∑ transaction_id –¥–ª—è tg_id={tg_id}")

        user = get_active_user_by_tg_id(tg_id)
        if user:
            uid = user["uuid"]
            expires = datetime.utcnow() + timedelta(days=days)
            
            conn = get_connection()
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE users SET expires_at = ? WHERE uuid = ?",
                (expires.isoformat(), uid)
            )
            conn.commit()
            conn.close()
            
            logging.info(f"Updated paid user {uid} (tg_id={tg_id}, new_expires={expires})")
        else:
            uid = str(uuid4())
            expires = datetime.utcnow() + timedelta(days=days)

            loop = asyncio.get_running_loop()
            await loop.run_in_executor(None, add_client, uid)
            await loop.run_in_executor(None, save_user, tg_id, uid, expires)

            logging.info(f"Created new paid user {uid} (tg_id={tg_id}, expires={expires})")

        host = settings.AVAILABLE_IPS[0]
        pbk = settings.XRAY_PUBLIC_KEY
        sid = settings.XRAY_SHORT_ID
        sni = settings.XRAY_SNI
        port = 443

        link = generate_vless_link(uid, host, port, pbk, sid, sni)
        days_left = max(0, (expires - datetime.utcnow()).days)

        if return_days:
            return link, days_left, None
        return format_expiration_message(link, days_left)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞: {str(e)}", exc_info=True)
        if return_days:
            return None, None, str(e)
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏/–ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {str(e)}"

async def create_test_user(tg_id: int = 0, minutes: int = 1, return_days: bool = False):
    try:
        is_admin = str(tg_id) == str(settings.ADMIN_IDS)
        
        if not is_admin and get_active_user_by_tg_id(tg_id):
            if return_days:
                return None, None, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ."
            return "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ."
        
        uid = str(uuid4())
        expires = datetime.utcnow() + timedelta(minutes=minutes)
        
        loop = asyncio.get_running_loop()
        await loop.run_in_executor(None, add_client, uid)
        await loop.run_in_executor(None, save_user, tg_id, uid, expires)

        host = settings.AVAILABLE_IPS[0]
        pbk = settings.XRAY_PUBLIC_KEY
        sid = settings.XRAY_SHORT_ID
        sni = settings.XRAY_SNI
        port = 443

        link = generate_vless_link(uid, host, port, pbk, sid, sni)
        days_left = max(0, (expires - datetime.utcnow()).days)

        if return_days:
            return link, days_left, None
        return format_expiration_message(link, days_left)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞: {str(e)}", exc_info=True)
        if return_days:
            return None, None, str(e)
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞: {str(e)}"

async def delete_user(uuid: str) -> bool:
    loop = asyncio.get_running_loop()

    removed_from_xray = await loop.run_in_executor(None, remove_client, uuid)
    deleted_from_db = await loop.run_in_executor(None, delete_user_by_uuid, uuid)

    return removed_from_xray and deleted_from_db