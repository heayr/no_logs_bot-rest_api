# bot/handlers/active_config.py
import logging
from datetime import datetime  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
from aiogram import Router, types
from aiogram.types import BufferedInputFile
from bot.services.user_config_service import generate_vless_link
from db.crud.user_crud import get_active_user_by_tg_id
from bot.keyboards.main_menu import get_back_to_menu_button
from core.config import settings
from utils.qr import generate_qr_code

active_config_handler = Router()

@active_config_handler.callback_query(lambda c: c.data == "get_active_config")
async def handle_active_config(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞.
    """
    logging.debug(f"Callback get_active_config –æ—Ç tg_id={callback.from_user.id}")
    try:
        tg_id = callback.from_user.id
        user = get_active_user_by_tg_id(tg_id)
        if not user or "expires_at" not in user:
            logging.info(f"–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω: tg_id={tg_id}")
            await callback.message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞. –ü–æ–ª—É—á–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –∏–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
                reply_markup=get_back_to_menu_button(),
                parse_mode="HTML"
            )
            await callback.answer()
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º expires_at –≤ datetime, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        expires_at = user["expires_at"]
        if isinstance(expires_at, str):
            expires_at = datetime.fromisoformat(expires_at)

        config_link = generate_vless_link(
            user["uuid"],
            settings.AVAILABLE_IPS[0],
            443,
            settings.XRAY_PUBLIC_KEY,
            settings.XRAY_SHORT_ID,
            settings.XRAY_SNI
        )
        expires_days = (expires_at - datetime.now()).days
        if expires_days < 0:
            expires_days = 0  # –ï—Å–ª–∏ —Å—Ä–æ–∫ –∏—Å—Ç—ë–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 0 –¥–Ω–µ–π

        qr_io = await generate_qr_code(config_link)
        caption = (
            f"üîí <b>–í–∞—à —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥</b>\n"
            f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expires_days} –¥–Ω–µ–π\n\n"
            f"<code>{config_link}</code>\n\n"
            f"üì≤ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É."
        )
        await callback.message.answer_photo(
            photo=BufferedInputFile(qr_io.getvalue(), filename="qr_code.png"),
            caption=caption,
            reply_markup=get_back_to_menu_button(),
            parse_mode="HTML"
        )
        await callback.answer("–ê–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_active_config: tg_id={tg_id}, {str(e)}", exc_info=True)
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_menu_button(),
            parse_mode="HTML"
        )
        await callback.answer()