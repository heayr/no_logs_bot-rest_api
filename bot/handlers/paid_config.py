# app/bot/handlers/paid_config.py
import logging
import html
from datetime import datetime
from aiogram import Router, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, input_file
from aiogram.filters import Command
from db.crud.transaction_crud import save_pending_transaction, get_confirmed_transaction
from bot.services.user_config_service import send_payment_link, create_paid_user
from utils.qr import generate_qr_code
from db.session import get_connection

payment_handler = Router()
logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è payment_handler")


async def process_payment_request(bot: Bot, chat_id: int, tg_id: int):
    """–°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–ø–ª–∞—Ç—ã.
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π/QR –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ send_payment_link (–≤–æ –∏–∑–±–µ–∂–∞–Ω–∏–µ –¥—É–±–ª–µ–π).
    """
    amount = 200
    days = 30
    order_id = f"order_{tg_id}_{chat_id}_{int(datetime.now().timestamp())}"

    payment_url, payment_id = await send_payment_link(bot, chat_id, tg_id, amount, order_id)
    if not payment_url:
        return

    success = await save_pending_transaction(tg_id, order_id, amount, days, payment_id)
    if not success:
        await bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="HTML")
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")

    logging.info(f"–ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å—Å—ã–ª–∫–∞ –≤—ã–¥–∞–Ω–∞ (–±–µ–∑ –¥—É–±–ª–µ–π QR) –¥–ª—è tg_id={tg_id}, order_id={order_id}, payment_id={payment_id}")

@payment_handler.message(Command("subscribe"))
async def subscribe_command(msg: Message, bot: Bot):
    """–ú–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã."""
    tg_id = msg.from_user.id
    logging.debug(f"–•–µ–Ω–¥–ª–µ—Ä /subscribe —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è tg_id={tg_id}")
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")]
    ])
    await msg.answer(
        "üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ 200 RUB –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ö–æ–Ω—Ñ–∏–≥ –ø—Ä–∏–¥—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

@payment_handler.message(Command("pay"))
async def pay_command(msg: Message, bot: Bot):
    tg_id = msg.from_user.id
    logging.debug(f"–•–µ–Ω–¥–ª–µ—Ä /pay —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è tg_id={tg_id}")
    await process_payment_request(bot, msg.chat.id, tg_id)

@payment_handler.callback_query(lambda c: c.data == "subscribe")
async def handle_start_payment(callback: CallbackQuery, bot: Bot):
    tg_id = callback.from_user.id
    logging.debug(f"–•–µ–Ω–¥–ª–µ—Ä subscribe (callback) —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è tg_id={tg_id}")
    await process_payment_request(bot, callback.message.chat.id, tg_id)
    await callback.answer()

@payment_handler.message(Command("config"))
async def config_command(msg: Message, bot: Bot):
    tg_id = msg.from_user.id
    transaction = get_confirmed_transaction(tg_id)

    if not transaction:
        await msg.answer("‚ùå –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pay –¥–ª—è –æ–ø–ª–∞—Ç—ã.", parse_mode="HTML")
        return

    config_link, expires_days, error = await create_paid_user(tg_id, days=transaction["days"], return_days=True)
    if error:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}", parse_mode="HTML")
        return

    qr_io = await generate_qr_code(config_link)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_menu")]
    ])

    caption = (
        f"üîí <b>–í–∞—à –∫–æ–Ω—Ñ–∏–≥ –≥–æ—Ç–æ–≤!</b>\n"
        f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expires_days} –¥–Ω–µ–π\n\n"
        f"üìå <b>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É:</b>\n"
        f"<code>{html.escape(config_link)}</code>\n\n"
        f"üì≤ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        f"1. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥\n"
        f"2. –ò–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é"
    )

    await bot.send_photo(
        msg.chat.id,
        photo=input_file.BufferedInputFile(qr_io.getvalue(), filename="qr_code.png"),
        caption=caption,
        parse_mode="HTML",
        reply_markup=keyboard
    )

@payment_handler.callback_query(lambda c: c.data == "get_paid_config")
async def handle_paid_config(callback: CallbackQuery, bot: Bot):
    tg_id = callback.from_user.id
    transaction = get_confirmed_transaction(tg_id)

    if not transaction:
        await callback.message.answer("‚ùå –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pay –¥–ª—è –æ–ø–ª–∞—Ç—ã.", parse_mode="HTML")
        await callback.answer()
        return

    config_link, expires_days, error = await create_paid_user(tg_id, days=transaction["days"], return_days=True)
    if error:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}", parse_mode="HTML")
        await callback.answer()
        return

    qr_io = await generate_qr_code(config_link)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_menu")]
    ])

    caption = (
        f"üîí <b>–í–∞—à –∫–æ–Ω—Ñ–∏–≥ –≥–æ—Ç–æ–≤!</b>\n"
        f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expires_days} –¥–Ω–µ–π\n\n"
        f"üìå <b>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É:</b>\n"
        f"<code>{html.escape(config_link)}</code>\n\n"
        f"üì≤ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
        f"1. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥\n"
        f"2. –ò–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é"
    )

    await bot.send_photo(
        callback.message.chat.id,
        photo=input_file.BufferedInputFile(qr_io.getvalue(), filename="qr_code.png"),
        caption=caption,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    await callback.answer("–ö–æ–Ω—Ñ–∏–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

@payment_handler.callback_query(lambda c: c.data == "back_to_menu")
async def handle_back_to_menu(callback: CallbackQuery):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
    menu = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîê –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ 30 –¥–Ω–µ–π", callback_data="get_paid_config")],
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")]
    ])
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu)
    await callback.answer()
