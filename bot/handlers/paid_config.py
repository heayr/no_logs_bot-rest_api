# app/bot/handlers/paid_config.py

import logging
import html
from aiogram import Router
from aiogram.types import CallbackQuery, BufferedInputFile
from aiogram.enums.parse_mode import ParseMode

from bot.services.user_config_service import create_paid_user
from utils.qr import generate_qr_code

paid_config_handler = Router()

@paid_config_handler.callback_query(lambda c: c.data == "get_paid_config")
async def handle_paid_config(callback: CallbackQuery):
    await callback.answer()
    try:
        # create_paid_user –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç tuple (link, days), –ø–æ—ç—Ç–æ–º—É —Ä–∞—Å–ø–∞–∫—É–µ–º
        config_link, expires_days = await create_paid_user(callback.from_user.id, return_days=True)

        qr_code = generate_qr_code(config_link)
        qr_file = BufferedInputFile(qr_code.getvalue(), filename="qrcode_paid.png")

        caption = (
            f"üîí <b>–í–∞—à VPN-–∫–æ–Ω—Ñ–∏–≥ –≥–æ—Ç–æ–≤!</b>\n"
            f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expires_days} –¥–Ω–µ–π\n\n"
            f"üìå <b>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É:</b>\n"
            f"<code>{html.escape(config_link)}</code>\n\n"
            f"üì≤ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
            f"1. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥\n"
            f"2. –ò–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é\n"
            f"3. –î–ª—è v2RayTun –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É"
        )

        await callback.message.answer_photo(
            photo=qr_file,
            caption=caption,
            parse_mode=ParseMode.HTML
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {e}", exc_info=True)
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞.")
