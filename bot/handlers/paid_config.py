# app/bot/handlers/paid_config.py


import logging
from aiogram import Router, Bot
from aiogram.types import CallbackQuery
from datetime import datetime
from bot.services.user_config_service import send_payment_link
from db.crud.transaction_crud import get_confirmed_transaction, save_pending_transaction
from bot.keyboards.main_menu import main_menu, subscribe_menu, get_back_to_menu_button

payment_handler = Router()

@payment_handler.callback_query(lambda c: c.data == "get_paid_config")
async def handle_paid_config(callback: CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É.
    """
    logging.debug(f"Callback get_paid_config –æ—Ç tg_id={callback.from_user.id}")
    tg_id = callback.from_user.id
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
        transaction = await get_confirmed_transaction(tg_id)
        if transaction:
            logging.info(f"–ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–ª—è tg_id={tg_id}, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –º–µ–Ω—é")
            await callback.message.answer(
                "‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞. –ù–∞–∂–º–∏—Ç–µ 'üîÑ –ú–æ–π –∫–æ–Ω—Ñ–∏–≥', —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏.",
                reply_markup=main_menu(),
                parse_mode="HTML"
            )
            await callback.answer()
            return

        # –ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        amount = 200.00  # –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        days = 30
        transaction_id = f"tx_{tg_id}_{callback.message.chat.id}_{int(datetime.now().timestamp())}"
        payment_url, payment_id = await send_payment_link(bot, callback.message.chat.id, tg_id, amount, transaction_id)
        if payment_url:
            success = await save_pending_transaction(tg_id, transaction_id, amount, days, payment_id)
            if not success:
                logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: transaction_id={transaction_id}, tg_id={tg_id}")
                await callback.message.answer(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=get_back_to_menu_button(),
                    parse_mode="HTML"
                )
                await callback.answer()
                return
        await callback.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_paid_config: tg_id={tg_id}, {str(e)}", exc_info=True)
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_menu_button(),
            parse_mode="HTML"
        )
        await callback.answer()

@payment_handler.callback_query(lambda c: c.data == "get_subscription_info")
async def handle_subscription_info(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ.
    """
    logging.debug(f"Callback get_subscription_info –æ—Ç tg_id={callback.from_user.id}")
    tg_id = callback.from_user.id
    try:
        message = (
            "‚ÑπÔ∏è <b>–û –ø–æ–¥–ø–∏—Å–∫–µ</b>\n\n"
            "üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 200 —Ä—É–±–ª–µ–π\n"
            "‚è≥ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> 30 –¥–Ω–µ–π\n"
            "üîí <b>–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:</b>\n"
            "- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã—Ö–æ–¥ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\n"
            "- –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n"
            "- –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö\n\n"
            "–ù–∞–∂–º–∏—Ç–µ 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
        )
        await callback.message.answer(
            message,
            reply_markup=subscribe_menu(),
            parse_mode="HTML"
        )
        await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_subscription_info: tg_id={tg_id}, {str(e)}", exc_info=True)
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_menu_button(),
            parse_mode="HTML"
        )
        await callback.answer()

@payment_handler.callback_query(lambda c: c.data == "back_to_menu")
async def handle_back_to_menu(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    logging.debug(f"Callback back_to_menu –æ—Ç tg_id={callback.from_user.id}")
    try:
        await callback.message.answer(
            "üîí –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=main_menu(),
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_back_to_menu: tg_id={callback.from_user.id}, {str(e)}", exc_info=True)
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="HTML")
        await callback.answer()