import logging
import html
from aiogram import Router, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, input_file
from aiogram.filters import Command
from db.crud.transaction_crud import save_pending_transaction, get_confirmed_transaction
from bot.services.user_config_service import send_payment_link, create_paid_user
from utils.qr import generate_qr_code
from core.config import settings

payment_handler = Router()
logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è payment_handler")

@payment_handler.message(Command("subscribe"))
async def subscribe_command(msg: Message, bot: Bot):
    try:
        tg_id = msg.from_user.id
        logging.debug(f"–•–µ–Ω–¥–ª–µ—Ä /subscribe —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è tg_id={tg_id}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")],
            [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="get_paid_config")]
        ])
        await msg.answer(
            "üí≥ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ 5000 RUB –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥, –µ—Å–ª–∏ —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏.",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        logging.info(f"–ö–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –¥–ª—è tg_id={tg_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /subscribe –¥–ª—è tg_id={msg.from_user.id}: {e}", exc_info=True)
        await msg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="HTML")

@payment_handler.message(Command("pay"))
async def pay_command(msg: Message, bot: Bot):
    try:
        tg_id = msg.from_user.id
        logging.debug(f"–•–µ–Ω–¥–ª–µ—Ä /pay —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è tg_id={tg_id}")
        amount = 5000
        days = 30
        order_id = f"order_{tg_id}_{msg.chat.id}_{int(msg.date.timestamp())}"
        logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω order_id={order_id} –¥–ª—è tg_id={tg_id}")
        
        success = save_pending_transaction(tg_id, order_id, amount, days)
        if not success:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
        
        payment_url, payment_id = await send_payment_link(bot, msg.chat.id, tg_id, amount, order_id)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=payment_url)],
            [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="get_paid_config")],
            [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_menu")]
        ])
        
        qr_io = await generate_qr_code(payment_url)
        await bot.send_photo(
            msg.chat.id,
            photo=input_file.BufferedInputFile(qr_io.getvalue(), filename="qr_code.png"),
            caption=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ {amount} RUB –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.\n\nüì≤ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥.",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        logging.info(f"–ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è tg_id={tg_id}, order_id={order_id}, payment_id={payment_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è tg_id={msg.from_user.id}: {e}", exc_info=True)
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="HTML")

@payment_handler.message(Command("config"))
async def config_command(msg: Message, bot: Bot):
    try:
        tg_id = msg.from_user.id
        logging.debug(f"–•–µ–Ω–¥–ª–µ—Ä /config —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è tg_id={tg_id}")
        transaction = get_confirmed_transaction(tg_id)
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç get_confirmed_transaction –¥–ª—è tg_id={tg_id}: {transaction}")
        
        if not transaction:
            await msg.answer("‚ùå –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pay –¥–ª—è –æ–ø–ª–∞—Ç—ã.", parse_mode="HTML")
            return

        config_link, expires_days, error = await create_paid_user(tg_id, days=transaction["days"], return_days=True)
        
        if error:
            await msg.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}", parse_mode="HTML")
            return

        qr_io = await generate_qr_code(config_link)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="get_paid_config")],
            [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_menu")]
        ])

        caption = (
            f"üîí <b>–í–∞—à –∫–æ–Ω—Ñ–∏–≥ –≥–æ—Ç–æ–≤!</b>\n"
            f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expires_days} –¥–Ω–µ–π\n\n"
            f"üìå <b>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É:</b>\n"
            f"<code>{html.escape(config_link)}</code>\n\n"
            f"üì≤ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
            f"1. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥\n"
            f"2. –ò–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é\n"
            f"3. –î–ª—è v2RayTun –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É"
        )

        await bot.send_photo(
            msg.chat.id,
            photo=input_file.BufferedInputFile(qr_io.getvalue(), filename="qr_code.png"),
            caption=caption,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        logging.info(f"VLESS-—Å—Å—ã–ª–∫–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ /config –¥–ª—è tg_id={tg_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è tg_id={msg.from_user.id}: {e}", exc_info=True)
        await msg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–æ–Ω—Ñ–∏–≥–∞.", parse_mode="HTML")

@payment_handler.callback_query(lambda c: c.data == "get_paid_config")
async def handle_paid_config(callback: CallbackQuery, bot: Bot):
    try:
        tg_id = callback.from_user.id
        logging.debug(f"–•–µ–Ω–¥–ª–µ—Ä get_paid_config —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è tg_id={tg_id}")
        transaction = get_confirmed_transaction(tg_id)
        logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç get_confirmed_transaction –¥–ª—è tg_id={tg_id}: {transaction}")
        
        if not transaction:
            await callback.message.answer("‚ùå –ù–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /pay –¥–ª—è –æ–ø–ª–∞—Ç—ã.", parse_mode="HTML")
            await callback.answer()
            return

        config_link, expires_days, error = await create_paid_user(tg_id, days=transaction["days"], return_days=True)
        
        if error:
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}", parse_mode="HTML")
            await callback.answer()
            return

        qr_io = await generate_qr_code(config_link)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_menu")]
        ])

        caption = (
            f"üîí <b>–í–∞—à –∫–æ–Ω—Ñ–∏–≥ –≥–æ—Ç–æ–≤!</b>\n"
            f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expires_days} –¥–Ω–µ–π\n\n"
            f"üìå <b>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É:</b>\n"
            f"<code>{html.escape(config_link)}</code>\n\n"
            f"üì≤ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
            f"1. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥\n"
            f"2. –ò–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é\n"
            f"3. –î–ª—è v2RayTun –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É"
        )

        await bot.send_photo(
            callback.message.chat.id,
            photo=input_file.BufferedInputFile(qr_io.getvalue(), filename="qr_code.png"),
            caption=caption,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        await callback.answer("–ö–æ–Ω—Ñ–∏–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        logging.info(f"VLESS-—Å—Å—ã–ª–∫–∞ –≤—ã–¥–∞–Ω–∞ –ø–æ get_paid_config –¥–ª—è tg_id={tg_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–æ–Ω—Ñ–∏–≥–∞ –¥–ª—è tg_id={callback.from_user.id}: {e}", exc_info=True)
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–æ–Ω—Ñ–∏–≥–∞.", parse_mode="HTML")
        await callback.answer()

@payment_handler.callback_query(lambda c: c.data == "subscribe")
async def handle_start_payment(callback: CallbackQuery, bot: Bot):
    try:
        tg_id = callback.from_user.id
        logging.debug(f"–•–µ–Ω–¥–ª–µ—Ä subscribe —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è tg_id={tg_id}")
        amount = 5000
        days = 30
        order_id = f"order_{tg_id}_{callback.message.chat.id}_{int(callback.message.date.timestamp())}"
        logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω order_id={order_id} –¥–ª—è tg_id={tg_id}")
        
        success = save_pending_transaction(tg_id, order_id, amount, days)
        if not success:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
        
        payment_url, payment_id = await send_payment_link(bot, callback.message.chat.id, tg_id, amount, order_id)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", url=payment_url)],
            [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="get_paid_config")],
            [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_to_menu")]
        ])
        
        qr_io = await generate_qr_code(payment_url)
        await bot.send_photo(
            callback.message.chat.id,
            photo=input_file.BufferedInputFile(qr_io.getvalue(), filename="qr_code.png"),
            caption=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ {amount} RUB –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.\n\nüì≤ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥.",
            parse_mode="HTML",
            reply_markup=keyboard
        )
        logging.info(f"–ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è tg_id={tg_id}, order_id={order_id}, payment_id={payment_id}")
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è tg_id={callback.from_user.id}: {e}", exc_info=True)
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="HTML")
        await callback.answer()

@payment_handler.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, bot: Bot):
    try:
        tg_id = callback.from_user.id
        logging.debug(f"–•–µ–Ω–¥–ª–µ—Ä back_to_menu —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è tg_id={tg_id}")
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="subscribe")],
            [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="get_paid_config")]
        ])
        await callback.message.answer(
            "üí≥ –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ 5000 RUB –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥, –µ—Å–ª–∏ —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏.",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await callback.answer()
        logging.info(f"–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –¥–ª—è tg_id={tg_id}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é –¥–ª—è tg_id={callback.from_user.id}: {e}", exc_info=True)
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="HTML")
        await callback.answer()