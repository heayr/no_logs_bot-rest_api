# app/bot/handlers/test_config.py

import logging
from core.config import settings
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import BufferedInputFile
import html
from bot.services.user_config_service import create_test_user
from utils.qr import generate_qr_code  # —Å–æ–∑–¥–∞–¥–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ
from aiogram.enums.parse_mode import ParseMode

test_config_handler = Router()

@test_config_handler.message(lambda m: m.text == "üéÅ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç")
async def handle_test_request(message: types.Message):
    try:
        config_link, expires_days, error = await create_test_user(
            message.from_user.id, 
            minutes=settings.TEST_MINUTES,
            return_days=True
        )
        
        if error:
            await message.answer(error)
        elif config_link and expires_days is not None:
            response = (
                f"üîí –í–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π VPN-–∫–æ–Ω—Ñ–∏–≥:\n\n"
                f"{config_link}\n\n"
                f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expires_days} –¥–Ω–µ–π\n\n"
                f"–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª—é–±–æ–π –∫–ª–∏–µ–Ω—Ç V2RayN."
            )
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–º–µ—Ç–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∞
            if str(message.from_user.id) == str(settings.ADMIN_IDS):
                response += "\n\n‚öôÔ∏è –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –≤ –æ–±—Ö–æ–¥ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (—Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"
            await message.answer(response)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_test_request: {str(e)}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin_test (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@test_config_handler.message(Command("admin_test"))
async def handle_admin_test(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
    if str(message.from_user.id) != str(settings.ADMIN_IDS):
        return await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥ –Ω–∞ 1 –º–∏–Ω—É—Ç—É
    config_link, expires_days, error = await create_test_user(
        message.from_user.id,
        minutes=1,  # –û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        return_days=True
    )
    
    if config_link:
        await message.answer(
            f"‚öôÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥ (–∞–¥–º–∏–Ω-—Ä–µ–∂–∏–º):\n\n"
            f"{config_link}\n\n"
            f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expires_days} –º–∏–Ω—É—Ç\n\n"
            f"–≠—Ç–æ—Ç –∫–æ–Ω—Ñ–∏–≥ —Å–æ–∑–¥–∞–Ω –≤ –æ–±—Ö–æ–¥ –æ–±—ã—á–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."
        )
    elif error:
        await message.answer(f"–û—à–∏–±–∫–∞: {error}")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥")