# app/bot/handlers/test_config.py

import logging
from aiogram import Router, types
from aiogram.types import BufferedInputFile
import html
from bot.services.user_config_service import create_test_user
from utils.qr import generate_qr_code  # —Å–æ–∑–¥–∞–¥–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ
from aiogram.enums.parse_mode import ParseMode

test_config_handler = Router()

@test_config_handler.message(lambda m: m.text == "üéÅ –ü–æ–ª—É—á–∏—Ç—å —Ç–µ—Å—Ç")
async def handle_test_request(message: types.Message):
    try:
        config_link, expires_days = await create_test_user(message.from_user.id, return_days=True)
        qr_code = generate_qr_code(config_link)

        caption = (
            f"üîí <b>–í–∞—à VPN-–∫–æ–Ω—Ñ–∏–≥ –≥–æ—Ç–æ–≤!</b>\n"
            f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expires_days} –¥–µ–Ω—å{'–µ–π' if expires_days != 1 else ''}\n\n"
            f"üìå <b>–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É:</b>\n<code>{html.escape(config_link)}</code>\n\n"
            f"üì≤ <b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>\n"
            f"1. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥\n"
            f"2. –ò–ª–∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤—Ä—É—á–Ω—É—é\n"
            f"3. –î–ª—è v2RayTun –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É"
        )

        await message.answer_photo(
            photo=BufferedInputFile(qr_code.getvalue(), filename="qrcode.png"),
            caption=caption,
            parse_mode=ParseMode.HTML
        )

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –∫–æ–Ω—Ñ–∏–≥–∞.")
