# bot/handlers/test_config.py


import logging
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import BufferedInputFile
from bot.services.user_config_service import create_test_config
from bot.keyboards.main_menu import get_back_to_menu_button
from utils.qr import generate_qr_code
from core.config import settings

test_config_handler = Router()

@test_config_handler.callback_query(lambda c: c.data == "get_test_config")
async def handle_test_config(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ —á–µ—Ä–µ–∑ callback.
    """
    logging.debug(f"Callback get_test_config –æ—Ç tg_id={callback.from_user.id}")
    try:
        tg_id = callback.from_user.id
        config_link, expires_days, error = await create_test_config(tg_id, minutes=settings.TEST_MINUTES, return_days=True)
        if error:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞: tg_id={tg_id}, {error}")
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}", reply_markup=get_back_to_menu_button(), parse_mode="HTML")
            await callback.answer()
            return

        qr_io = await generate_qr_code(config_link)
        caption = (
            f"üîí <b>–¢–µ—Å—Ç–æ–≤—ã–π –¥–æ—Å—Ç—É–ø –≥–æ—Ç–æ–≤!</b>\n"
            f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expires_days} –¥–Ω–µ–π\n\n"
            f"<code>{config_link}</code>\n\n"
            f"üì≤ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É."
        )

        if str(tg_id) == str(settings.ADMIN_IDS):
            caption += "\n\n‚öôÔ∏è –ê–¥–º–∏–Ω-—Ä–µ–∂–∏–º: –∫–æ–Ω—Ñ–∏–≥ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."

        await callback.message.answer_photo(
            photo=BufferedInputFile(qr_io.getvalue(), filename="qr_code.png"),
            caption=caption,
            reply_markup=get_back_to_menu_button(),
            parse_mode="HTML"
        )
        await callback.answer("–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_test_config: tg_id={tg_id}, {str(e)}", exc_info=True)
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_back_to_menu_button(),
            parse_mode="HTML"
        )
        await callback.answer()

@test_config_handler.message(Command("admin_test"))
async def handle_admin_test(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin_test –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ –∞–¥–º–∏–Ω–æ–º.
    """
    logging.debug(f"–ö–æ–º–∞–Ω–¥–∞ /admin_test –æ—Ç tg_id={message.from_user.id}")
    try:
        if str(message.from_user.id) != str(settings.ADMIN_IDS):
            await message.answer("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", parse_mode="HTML")
            return

        config_link, expires_days, error = await create_test_config(message.from_user.id, minutes=1, return_days=True)
        if error:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞: tg_id={message.from_user.id}, {error}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {error}", reply_markup=get_back_to_menu_button(), parse_mode="HTML")
            return

        qr_io = await generate_qr_code(config_link)
        caption = (
            f"‚öôÔ∏è <b>–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥ (–∞–¥–º–∏–Ω):</b>\n"
            f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {expires_days} –º–∏–Ω—É—Ç\n\n"
            f"<code>{config_link}</code>\n\n"
            f"üì≤ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É."
        )

        await message.answer_photo(
            photo=BufferedInputFile(qr_io.getvalue(), filename="qr_code.png"),
            caption=caption,
            reply_markup=get_back_to_menu_button(),
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_admin_test: tg_id={message.from_user.id}, {str(e)}", exc_info=True)
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=get_back_to_menu_button(), parse_mode="HTML")